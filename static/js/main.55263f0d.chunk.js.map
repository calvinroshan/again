{"version":3,"sources":["components/Titles.js","components/Form.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Titles","className","React","Component","Form","onSubmit","this","props","getWeather","type","name","placeholder","Weather","city","country","temperature","humidity","description","error","API_KEY","App","state","undefined","e","a","preventDefault","target","elements","value","fetch","api_call","json","data","console","log","setState","main","temp","sys","weather","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"ySAYeA,E,iLARb,OACC,6BACA,wBAAIC,UAAU,0BAAd,kBACA,wBAAIA,UAAU,6BAAd,qD,GALkBC,IAAMC,WCaZC,E,iLAXb,OACC,6BACC,0BAAMC,SAAUC,KAAKC,MAAMC,YAC1B,2BAAOC,KAAK,OAAOC,KAAK,OAAOC,YAAY,WAC3C,2BAAOF,KAAK,OAAOC,KAAK,UAAUC,YAAY,cAC9C,qD,GAPcT,IAAMC,WC+BVS,E,iLA7BZ,OACC,yBAAKX,UAAU,iBAEdK,KAAKC,MAAMM,MAAQP,KAAKC,MAAMO,SAAW,uBAAGb,UAAU,gBAAb,YACzC,0BAAMA,UAAU,kBAAkBK,KAAKC,MAAMM,KAA7C,IAAoDP,KAAKC,MAAMO,UAI/DR,KAAKC,MAAMQ,aAAe,uBAAGd,UAAU,gBAAb,eAC1B,0BAAMA,UAAU,kBAAkBK,KAAKC,MAAMQ,cAI7CT,KAAKC,MAAMS,UAAY,uBAAGf,UAAU,gBAAb,YACvB,0BAAMA,UAAU,kBAAkBK,KAAKC,MAAMS,WAI7CV,KAAKC,MAAMU,aAAe,uBAAGhB,UAAU,gBAAb,eAC1B,0BAAMA,UAAU,kBAAkBK,KAAKC,MAAMU,cAI7CX,KAAKC,MAAMW,OAAS,uBAAGjB,UAAU,kBAAkBK,KAAKC,MAAMW,Y,GAzB7ChB,IAAMC,WCGtBgB,EAAU,mCAoEDC,E,2MAlEbC,MAAQ,CACNN,iBAAaO,EACbT,UAAMS,EACNR,aAASQ,EACTN,cAAUM,EACVL,iBAAaK,EACbJ,WAAOI,G,EAETd,W,uCAAa,WAAOe,GAAP,qBAAAC,EAAA,6DACXD,EAAEE,iBACIZ,EAAOU,EAAEG,OAAOC,SAASd,KAAKe,MAC9Bd,EAAUS,EAAEG,OAAOC,SAASb,QAAQc,MAH/B,SAKYC,MAAM,qDAAD,OAAsDhB,EAAtD,YAA8DC,EAA9D,kBAA+EK,EAA/E,kBALjB,cAKLW,EALK,gBAMQA,EAASC,OANjB,OAMLC,EANK,OAOXC,QAAQC,IAAIF,GACTnB,GAAQC,GACTmB,QAAQC,IAAIF,GACZ,EAAKG,SAAS,CACdpB,YAAaiB,EAAKI,KAAKC,KACvBxB,KAAMmB,EAAKtB,KACXI,QAASkB,EAAKM,IAAIxB,QAClBE,SAAUgB,EAAKI,KAAKpB,SACpBC,YAAae,EAAKO,QAAQ,GAAGtB,YAC7BC,MAAM,MAGN,EAAKiB,SAAS,CACdpB,iBAAaO,EACbT,UAAMS,EACNR,aAASQ,EACTN,cAAUM,EACVL,iBAAaK,EACbJ,MAAO,gCAzBE,4C,8HA8BX,OACI,6BACE,yBAAKjB,UAAU,WACb,yBAAKA,UAAU,QACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,4BACf,kBAAC,EAAD,OAEA,yBAAKA,UAAU,2BACf,kBAAC,EAAD,CAAMO,WAAYF,KAAKE,aACvB,kBAAC,EAAD,CAASO,YAAaT,KAAKe,MAAMN,YACjCF,KAAMP,KAAKe,MAAMR,KACjBC,QAASR,KAAKe,MAAMP,QACpBE,SAAUV,KAAKe,MAAML,SACrBC,YAAaX,KAAKe,MAAMJ,YACxBC,MAAOZ,KAAKe,MAAMH,kB,GAvDlBhB,IAAMC,WCMJqC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.55263f0d.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass Titles extends React.Component {\r\n\trender(){\r\n\t\treturn(\r\n\t\t\t<div>\r\n\t\t\t<h1 className=\"title-container__title\">weather finder</h1>\r\n\t\t\t<h3 className=\"title-container__subtitle\">find out temperature, conditions and more...</h3>\r\n\t\t\t</div>\r\n\t\t\t);\r\n\t}\r\n};\r\nexport default Titles;","import React from 'react';\r\n\r\nclass Form extends React.Component {\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<form onSubmit={this.props.getWeather}>\r\n\t\t\t\t\t<input type=\"text\" name=\"city\" placeholder=\"city..\" />\r\n\t\t\t\t\t<input type=\"text\" name=\"country\" placeholder=\"country..\" /> \r\n\t\t\t\t\t<button>get weather</button>\r\n\t\t\t\t</form>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n};\r\nexport default Form;","import React from 'react';\r\n\r\nclass Weather extends React.Component{\r\n\t\trender(){\r\n\t\t\treturn(\r\n\t\t\t\t<div className=\"weather__info\">\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.props.city && this.props.country && <p className=\"weather__key\">Location: \r\n\t\t\t\t\t<span className=\"weather__value\">{this.props.city},{this.props.country}</span>\r\n\t\t\t\t\t</p> \r\n\t\t\t\t}\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.props.temperature && <p className=\"weather__key\">Temperature: \r\n\t\t\t\t\t<span className=\"weather__value\">{this.props.temperature}</span>\r\n\t\t\t\t\t</p> \r\n\t\t\t\t}\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.props.humidity && <p className=\"weather__key\">Humidity: \r\n\t\t\t\t\t<span className=\"weather__value\">{this.props.humidity}</span>\r\n\t\t\t\t\t</p> \r\n\t\t\t\t}\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.props.description && <p className=\"weather__key\">description: \r\n\t\t\t\t\t<span className=\"weather__value\">{this.props.description}</span>\r\n\t\t\t\t\t</p>\r\n\t\t\t\t\t }\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.props.error && <p className=\"weather__error\">{this.props.error}</p>\r\n\t\t\t\t}\r\n\t\t\t\t</div>\r\n\t\t\t\t);\r\n\t\t}\r\n};\r\nexport default Weather;","import React from 'react';\nimport Titles from './components/Titles';\nimport Form from './components/Form';\nimport Weather from './components/Weather';\n\nconst API_KEY = \"52c446ac05b81d3ae9ad15083e9044aa\";\nclass App extends React.Component{\n  state = {\n    temperature: undefined,\n    city: undefined,\n    country: undefined,\n    humidity: undefined,\n    description: undefined,\n    error: undefined\n  }\n  getWeather = async (e) => {\n    e.preventDefault();\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n\n    const api_call = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}&units=metric`);\n    const data = await api_call.json();\n    console.log(data);\n    if(city && country){\n      console.log(data);\n      this.setState({\n      temperature: data.main.temp,\n      city: data.name,\n      country: data.sys.country,\n      humidity: data.main.humidity,\n      description: data.weather[0].description,\n      error:\"\"\n    });\n    }else{\n      this.setState({\n      temperature: undefined,\n      city: undefined,\n      country: undefined,\n      humidity: undefined,\n      description: undefined,\n      error: \"please enter correct values\"\n    });\n    }\n  }\n  render(){\n    return(\n        <div>\n          <div className=\"wrapper\">\n            <div className=\"main\">\n              <div className=\"container\">\n                <div className=\"row\">\n                  <div className=\"col-xs-5 title-container\">\n                  <Titles/>\n                  </div>\n                  <div className=\"col-xs-7 form-container\">\n                  <Form getWeather={this.getWeather}/>\n                  <Weather temperature={this.state.temperature}\n                  city={this.state.city}\n                  country={this.state.country}\n                  humidity={this.state.humidity}\n                  description={this.state.description}\n                  error={this.state.error} />\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div> \n      );\n  }\n};\n\n       \nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}